plugins { id "com.github.johnrengelman.shadow" version "7.1.2" }
architectury { fabric() }

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric}"
    modApi "net.fabricmc.fabric-api:fabric-api:${parent.props.fabric}+${rootProject.minecraft}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    def props = [
            "id"              : rootProject.id,
            "name"            : rootProject.displayname,
            "description"     : rootProject.description,
            "author"          : rootProject.author,
            "license"         : rootProject.license,
            "websiteUrl"      : rootProject.website,
            "issueTrackerUrl" : rootProject.issues,
            "forgeUpdateUrl"  : rootProject.updater,
            "version"         : project.version,
            "minecraftVersion": rootProject.minecraft,
            "fabricVersion"   : rootProject.props.fabric,
            "forgeVersion"    : rootProject.props.forge,
            "neoForgeVersion" : rootProject.props.neoforge,
    ]

    inputs.properties props
    filesMatching("fabric.mod.json") { expand props }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set null
}

jar {
    archiveClassifier.set "dev"
    dependsOn processResources
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
